Scenario 1

#!/bin/bash
read -e -p "Log directory" log
read -e -p "extention" extn
read -e -p "backup directory" backupdir
tar czf archieve.tar.gz $(find $log -name "*.$extn")
mv archieve.tar.gz $backupdir/$(date +%F).tar.gz
rm $(find $log -name "*.$extn")
exit 0






Scenario 2

#!/bin/bash
read -p "archivefiles_directory: " archive_directory 

find $archive_directory -type f -name '*.tar.gz' -mmin +$((60 * 24 * 2)) -exec rm {} \; 

if !( crontab -l | grep -Fq "* * * * * /home/ubuntu/scenario2.sh" ); 

then
crontab -l | { cat; echo "* * * * * /home/ubuntu/scenario2.sh";} | crontab - 

fi
echo "script added to cron"



Scenario 3

#!/bin/bash 
if [ -z "$1" ]; then    
    echo "ERROR: Credentials file not specified" >&2; exit 1; 
elif [ -z "$2" ]; then  
    echo "ERROR: Backup directory not specified" >&2; exit 1;
fi
credentials_file=$(realpath $1)     
backup_directory=$(realpath $2)
if [ ! -f "$credentials_file" ]; then  
    echo "ERROR: Credentials file does not exist" >&2; exit 1;
elif [ ! -d "$backup_directory" ]; then  
    echo "ERROR: Backup directory does not exist" >&2; exit 1;
fi
source $credentials_file 
if [ -z ${hostname:+word} ]; then  
    echo "ERROR: hostname is not set" >&2; exit 1;
elif [ -z ${username:+word} ]; then 
    echo "ERROR: username is not set" >&2; exit 1;
elif [ -z ${password:+word} ]; then  
    echo "ERROR: password is not set" >&2; exit 1;
fi
mysqldump -h$hostname -u$username -p$password --all-databases > backup.sql 

if [[ $? != 0 ]]; then    
    echo "ERROR: Error in taking mysql backup" >&2; exit 1;
fi
mv backup.sql $backup_directory/$(date +%F_%R).sql 

path_to_script=$(realpath "$0")
if ! (crontab -l | grep -Fxq "0 */12 * * * $path_to_script $credentials_file $backup_directory"); then
    crontab -l | { cat; echo "0 */12 * * * $path_to_script $credentials_file $backup_directory"; } | crontab -
    echo "Script added to Cron"
fi
exit 0




Scenario 4

#!/bin/bash
if [ -f "$access_log.txt" ]; then
    rm $access_log.txt
fi

if [ -f "$error_log.txt" ]; then
    rm $error_log.txt
fi

cat /var/log/apache2/access_log > /home/shashwat/DALab/access_log.txt
cat /var/log/apache2/error_log > /home/shashwat/DALab/error_log.txt

read -e -p "Enter the name of the Access logs of HTTP  web server: " access_logfile
read -e -p "Enter the name of the Error logs of the HTTP web server: " error_logfile
read -e -p "Enter the Email ID: " Email

access_log1=$(realpath $access_logfile)
error_log1=$(realpath $error_logfile)
if [ ! -f "$access_log1" ]; then
    echo "ERROR: The access log file does not exist" >&2; exit 1;
fi

if [ ! -f "$error_log1" ]; then 
    echo "ERROR: The error log file does not exist" >&2; exit 1;
fi

cat $access_log1 | mail -s "Apache web server access logs" $Email
if [[ $? != 0 ]]; then
     echo "ERROR: Error in sending access log to email to $Email" >&2; exit 1;
fi

cat $error_log1 | mail -s "Apache web server error logs" $Email
if [[ $? != 0 ]]; then
     echo "ERROR: Error in sending error log to mail to $Email" >&2; exit 1;
fi

echo "The access and error logs both are successfully sent to $Email"
exit 0


Scenario 5

# bin/bash
a=`echo $?`
read -p "Enter listening port : " listening_port

netstat -au | grep -q ":listening_port"
b=`echo $?`
if [ $b != $a ];

then
echo "ERROR, Web server is not running" >&2
/etc/init.d/apache2 restart

fi
backupfolder="/home/shashwat/DALab/backup"
cp -r /var/log/apache2/ $backupfolder

netstat -au
netstat â€“lu



Scenario 6

#!/bin/bash
i=0
b=0
while [ $i -le 2 ]
do
read A
result= $A
a=`echo $?`
echo $a
if [ $a -eq $b ]; then
echo "Command is Valid"
else
echo "Command is Invalid"
fi
((i++))
done


Scenario 7

#!/bin/bash
read -e -p "Enter the device's name :" dname
read -e -p "Enter the threshold value :" tv

x=$(df -h | grep $dname | awk '{print $5}' | tr -d %)

if [ $x -gt $tv ];
then 
	echo "Disk usage is more than normal"
else
	echo "Disk usage is normal"
fi
exit 0


Scenario 8

Scenario 9

Scenario 10

Scenario 11

# taking bash as default bin
#!/bin/bash
# providing path for files to be traversed
FILES=/home/shashwat/DALab/backup/*
# start for loop
for f in $FILES
do
# take action on each file. $f store current file name
echo "Processing $f"
#wide spaced line
echo -en '\n'
# count of lines and the characters
wc $f
echo -en '\n'
#to get the owner of the file
#ls -l $f
stat -c "%U" $($f)
# counter to indicate the line numbers of the file
cat -n $f
echo -en '\n'
echo -en '\n'
echo -en '\n'
done


Scenario 12

#!/bin/bash
read -p "enter the password: " password
read -p "enter the file to be encrypted: " fname
name=$(find /home/shashwat/DALab/ -name $fname)
if [ -f "$name" ]
then
echo "$name"
gpg -c --batch --passphrase $password $name
rm $name
fi
if [ -d "$name" ]
then
for f in "$name"/*;
do
gpg -c --batch --passphrase $password $f
rm $f
done
fi

Scenario 13

#!/bin/bash
read -p "enter the password: " password
read -p "enter the file to be encrypted: " fname
name=$(find /home/shashwat/DALab/ -name $fname)
if [ -f "$name" ]
then
if [ ${name: -4} == ".gpg" ]
then
filename="${name%.*}"
result=$(gpg -d --batch --passphrase $password $name)
echo "$result">>$filename
rm $name
fi
fi
if [ -d "$name" ]
then
for f in "$name"/*;
do
if [ ${f: -4} == ".gpg" ]
then
filename="${f%.*}"
result=$(gpg -d --batch --passphrase $password $f)
echo "$result">>$filename
rm $f
fi
done
fi


Scenario 14

Scenario 15

#!/bin/bash
a=1
while [ $a -lt 10 ]
do
wget "http://ftp.gnu.org/gnu/wget/wget-1.5.3.tar.gz"
a=$(($a+1))
done



Scenario 16

#!/bin/bash

echo -e "\n\nUpdating Apt Packages and Upgrading latest patches\n"
sudo apt-get update -y && sudo apt-get upgrade -y
echo -e "\n\nInstalling Apache@ web server\n"
sudo apt-get install apache2 apache2-doc apache2-mpm-prefork apache2-utils libexpat1 ssl-cert -y
echo -e "\n\nInstalling PHP & Requirements\n"
sudo apt-get install libapache2-mod-php7.0 php7.0 php7.0-common php7.0-curl php7.0-dev php7.0-gd php-pear php7.0-mcrypt php7.0-mysql -y


Scenario 17

#!/bin/bash

if [ $( ifconfig | grep -o $1 ) == $1 ];
then 
ifconfig $1 | sed 3,8d | sed 1d
echo " Public IP: "
curl --interface $1 http://ifconfig.co

else
echo "NIC does not exist"
exit 125
fi
#command: ./file.sh  enp0s3(card_name)
